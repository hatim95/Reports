/**
 * Implements the Δ and Δ+ functions for optimized state integration.
 * Applies a state delta generated by Ψ_A PVM to the global state.
 */

// Generic record type for global state and deltas
type GlobalState = Record<string, any>;
type StateDelta = Record<string, any>;

/**
 * Applies a state delta to the global state (Δ function).
 * This is a simplified deep merge.
 * @param globalState - The current conceptual global state.
 * @param stateDelta - The changes to apply.
 * @returns The new global state after applying the delta.
 */
export const applyDelta = (globalState: GlobalState, stateDelta: StateDelta): GlobalState => {
    console.log("[Δ] Applying state delta...");

    const newState: GlobalState = { ...globalState };

    for (const key in stateDelta) {
        if (Object.prototype.hasOwnProperty.call(stateDelta, key)) {
            const deltaValue = stateDelta[key];
            const currentValue = newState[key];

            if (
                typeof deltaValue === 'object' &&
                deltaValue !== null &&
                !Array.isArray(deltaValue) &&
                typeof currentValue === 'object' &&
                currentValue !== null &&
                !Array.isArray(currentValue)
            ) {
                // Deep merge plain objects
                newState[key] = { ...currentValue, ...deltaValue };
            } else if (deltaValue instanceof Map && currentValue instanceof Map) {
                // Merge Maps
                newState[key] = new Map([...currentValue, ...deltaValue]);
            } else {
                // Overwrite primitive values, arrays, or other types
                newState[key] = deltaValue;
            }
        }
    }

    console.log("[Δ] State delta applied.");
    return newState;
};
