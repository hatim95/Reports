/**
 * Implements the Δ and Δ+ functions for optimized state integration.
 * Applies a state delta generated by Ψ_A PVM to the global state.
 */

/**
 * Applies a state delta to the global state (Δ function).
 * This is a simplified deep merge.
 * @param {object} globalState - The current conceptual global state.
 * @param {object} stateDelta - The changes to apply.
 * @returns {object} The new global state after applying the delta.
 */
export const applyDelta = (globalState, stateDelta) => {
    console.log("[Δ] Applying state delta...");
    // This is a simplistic deep merge. In a real system, Δ and Δ+
    // would involve more sophisticated, optimized state tree operations
    // (e.g., Merkle Patricia Tries updates).

    const newState = { ...globalState };

    for (const key in stateDelta) {
        if (Object.prototype.hasOwnProperty.call(stateDelta, key)) {
            const deltaValue = stateDelta[key];
            const currentValue = newState[key];

            if (typeof deltaValue === 'object' && deltaValue !== null && !Array.isArray(deltaValue) &&
                typeof currentValue === 'object' && currentValue !== null && !Array.isArray(currentValue)) {
                // Deep merge objects
                newState[key] = { ...currentValue, ...deltaValue };
            } else if (deltaValue instanceof Map && currentValue instanceof Map) {
                // Merge Maps
                newState[key] = new Map([...currentValue, ...deltaValue]);
            }
            else {
                // Overwrite primitive values or arrays
                newState[key] = deltaValue;
            }
        }
    }
    console.log("[Δ] State delta applied.");
    return newState;
};